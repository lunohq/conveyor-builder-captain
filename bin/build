#!/bin/sh

# Fail fast.
set -e

status() {
  echo "\033[0;32m$@\033[0m"
}

error() {
  >&2 echo $@
}

if [ -z "$REPOSITORY" ]; then
  error "REPOSITORY env var is required"
fi

if [ -z "$BRANCH" ]; then
  error "BRANCH env var is required"
fi

if [ -z "$SHA" ]; then
  error "SHA env var is required"
fi

# Captain namespace. https://github.com/harbur/captain/blob/32fb0d765cae2c15fb2fa15b5b989fb527704715/captain/cmd.go#L115-L117
export USER=`echo "${REPOSITORY}" | cut -f 1 -d '/'`

teardown() {
  local pid_file="/var/run/docker.pid"
  status "Stopping Docker..."
  if [ -e "$pid_file" ]; then
    kill -15 $(cat "$pid_file")
  fi
}

setup() {
  # Copy ssh keys from the data volume.
  cp -r /var/run/conveyor/.ssh /root/.ssh
  chown -R root:root ~/.ssh
  chmod -R 0600 ~/.ssh
  ssh-keyscan -t rsa github.com > ~/.ssh/known_hosts

  # Copy .docker/config.json from the data volume. Fallback to old .dockercfg.
  if [ -d /var/run/conveyor/.docker ]; then
    cp -r /var/run/conveyor/.docker /root/.docker
  else
    cp -r /var/run/conveyor/.dockercfg /root/.dockercfg
  fi

  status "Starting Docker..."
  wrapdocker
  docker version
}

clone() {
  status "Cloning..."
  # Clone the given branch and checkout the sha.
  git clone --depth 50 --branch="$BRANCH" "git@github.com:${REPOSITORY}.git" "$REPOSITORY"
  cd "$REPOSITORY"
  git checkout -qf "$SHA"
}

pull() {
  if [ "$CACHE" = "on" ]; then
    status "Pulling..."
    captain pull
  else
    status "Cache disabled. Not pulling."
  fi
}

build() {
  status "Building..."
  captain build
}

push() {
  if [ -z "$DRY" ]; then
    status "Pushing images..."
    captain push
  else
    status "Dry run enabled. Not pushing."
  fi
}

run() {
  setup
  clone && pull && build && push
}

trap teardown 0

run
